apiVersion: v1
kind: Namespace
metadata:
  name: task-manager
  labels:
    name: task-manager
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init-script
  namespace: task-manager
data:
  init.sql: |
    -- Create enum types
    CREATE TYPE task_status AS ENUM ('todo', 'in_progress', 'review', 'done');
    CREATE TYPE task_priority AS ENUM ('low', 'medium', 'high', 'urgent');

    -- Create tasks table
    CREATE TABLE IF NOT EXISTS tasks (
        id UUID PRIMARY KEY,
        title VARCHAR(200) NOT NULL,
        description TEXT,
        status task_status NOT NULL DEFAULT 'todo',
        priority task_priority NOT NULL,
        assigned_to VARCHAR(255),
        created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
        updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
        due_date TIMESTAMP WITH TIME ZONE,
        
        -- Constraints
        CONSTRAINT title_not_empty CHECK (LENGTH(TRIM(title)) > 0)
    );

    -- Create indexes for better performance
    CREATE INDEX IF NOT EXISTS idx_tasks_status ON tasks(status);
    CREATE INDEX IF NOT EXISTS idx_tasks_priority ON tasks(priority);
    CREATE INDEX IF NOT EXISTS idx_tasks_assigned_to ON tasks(assigned_to);
    CREATE INDEX IF NOT EXISTS idx_tasks_created_at ON tasks(created_at);
    CREATE INDEX IF NOT EXISTS idx_tasks_due_date ON tasks(due_date);

    -- Create function to update updated_at timestamp
    CREATE OR REPLACE FUNCTION update_updated_at_column()
    RETURNS TRIGGER AS $$
    BEGIN
        NEW.updated_at = NOW();
        RETURN NEW;
    END;
    $$ language 'plpgsql';

    -- Create trigger to automatically update updated_at
    CREATE TRIGGER update_tasks_updated_at 
        BEFORE UPDATE ON tasks 
        FOR EACH ROW 
        EXECUTE FUNCTION update_updated_at_column();

    -- Insert sample data for development
    INSERT INTO tasks (id, title, description, priority, assigned_to, due_date) VALUES
        (gen_random_uuid(), 'Setup DevContainer Environment', 'Configure development containers for the project', 'high', 'dev@example.com', NOW() + INTERVAL '7 days'),
        (gen_random_uuid(), 'Implement User Authentication', 'Add JWT-based authentication to the API', 'urgent', 'dev@example.com', NOW() + INTERVAL '3 days'),
        (gen_random_uuid(), 'Write API Documentation', 'Complete OpenAPI documentation for all endpoints', 'medium', null, NOW() + INTERVAL '14 days'),
        (gen_random_uuid(), 'Setup CI/CD Pipeline', 'Configure GitHub Actions for automated testing and deployment', 'high', 'devops@example.com', NOW() + INTERVAL '10 days'),
        (gen_random_uuid(), 'Database Optimization', 'Review and optimize database queries for performance', 'low', null, NOW() + INTERVAL '30 days')
    ON CONFLICT (id) DO NOTHING;